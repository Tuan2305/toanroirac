import matplotlib.pyplot as plt
import networkx as nx
from collections import deque

class Graph:
    def __init__(self, vertices, directed=False, multigraph=False):
        self.vertices = vertices
        self.directed = directed
        self.multigraph = multigraph
        self.graph = [[0] * vertices for _ in range(vertices)]

    def add_edge(self, u, v):
        if self.multigraph:
            self.graph[u][v] += 1
            if not self.directed:
                self.graph[v][u] += 1
        else:
            self.graph[u][v] = 1
            if not self.directed:
                self.graph[v][u] = 1

    def print_graph(self):
        for row in self.graph:
            print(" ".join(map(str, row)))
            
    def plot_graph(self):
        G = nx.MultiDiGraph() if self.multigraph and self.directed else \
            (nx.DiGraph() if self.directed else \
            (nx.MultiGraph() if self.multigraph else nx.Graph()))

        for i in range(self.vertices):
            G.add_node(i)

        for i in range(self.vertices):
            for j in range(self.vertices):
                weight = self.graph[i][j]
                if weight > 0:
                    if self.directed or (not self.directed and not G.has_edge(i, j)):
                        G.add_edge(i, j, weight=weight)

        pos = nx.spring_layout(G)

        if self.directed:
            edge_labels = {(i, j): str(G[i][j][0]['weight']) for i, j in G.edges()}
            nx.draw(G, pos, with_labels=True, font_weight='bold', arrows=True, connectionstyle='arc3,rad=0.1')

        nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)
        plt.show()



    def dfs(self, start, visited=None):
        if visited is None:
            visited = [False] * self.vertices

        visited[start] = True
        print(start, end=" ")

        for i in range(self.vertices):
            if self.graph[start][i] > 0 and not visited[i]:
                self.dfs(i, visited)

    def bfs(self, start):
        visited = [False] * self.vertices
        queue = deque([start])
        visited[start] = True

        while queue:
            current = queue.popleft()
            print(current, end=" ")

            for i in range(self.vertices):
                if self.graph[current][i] > 0 and not visited[i]:
                    queue.append(i)
                    visited[i] = True
                    
    def degree_vertices(self):
        degrees = [sum(row) for row in self.graph]
        return degrees

    def shortest_path(self, start, end):
        visited = [False] * self.vertices
        distance = [-1] * self.vertices
        parent = [-1] * self.vertices

        queue = deque([start])
        visited[start] = True
        distance[start] = 0

        while queue:
            current = queue.popleft()

            for i in range(self.vertices):
                if self.graph[current][i] > 0 and not visited[i]:
                    queue.append(i)
                    visited[i] = True
                    distance[i] = distance[current] + 1
                    parent[i] = current

        if distance[end] == -1:
            return None  # No path exists

        path = []
        while end != -1:
            path.append(end)
            end = parent[end]

        return path[::-1]

def read_graph_from_file(file_path, directed=False, multigraph=False):
    try:
        with open(file_path, 'r') as file:
            lines = file.readlines()
            vertices = len(lines)
            graph = Graph(vertices, directed, multigraph)

            for i, line in enumerate(lines):
                edge = list(map(int, line.strip().split()))
                for j, value in enumerate(edge):
                    if value > 0:
                        for _ in range(value):
                            graph.add_edge(i, j)

            return graph

    except FileNotFoundError:
        raise FileNotFoundError(f"File '{file_path}' not found")

if __name__ == "__main__":
    file_path = "C:/Users/THIS PC/Desktop/toanroirac/.vscode/duan/graph.txt"

    try:
        graph = read_graph_from_file(file_path, directed=True, multigraph=True)
        graph.print_graph()
        graph.plot_graph()

        print("\nDFS Traversal:")
        graph.dfs(0)

        print("\nBFS Traversal:")
        graph.bfs(0)
        
        print("\nDegrees of vertices:", graph.degree_vertices())

        start_node = 0
        end_node = 3
        shortest_path_result = graph.shortest_path(start_node, end_node)

        if shortest_path_result is not None:
            print(f"Shortest path from node {start_node} to {end_node}: {shortest_path_result}")
        else:
            print(f"No path from node {start_node} to {end_node}")
    except (ValueError, FileNotFoundError) as e:
        print(f"Error: {e}")
